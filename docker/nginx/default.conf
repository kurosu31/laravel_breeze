server{
    # listenでは、Webサーバがリクエストを受け付けるIPアドレスやポート番号を設定します。listen IPアドレス:ポート番号の形式で記述します。
    # ここでは、IPアドレスを省略しており、デフォルトの設定として、すべてのIPアドレスの80番ポートでリクエストを受け付けます。
    listen 80;

    # root, indexでは、それぞれ、ドキュメントルートのディレクトリ・インデックスとして使われるファイル名を設定します。
    # ここでは、リクエストのURIが/で終わっている（つまりディレクトリになっている）ときに
    # /var/www/html/（リクエストのURI）/index.htmlをレスポンスとして返すように設定しています。
    # php開発ではこれでよし。
    # root /var/www/html;
    # Laravelのアプリケーションに対するリクエストは、全てpublic/index.phpファイルが入り口になります。
    root  /var/www/html/laravel_fortify/public; 

    # indexの設定を修正します。インデックスページの設定をindex.htmlからindex.php index.html index.htmに変更しています。
    # インデックスページを複数設定した場合、ドキュメントルートのディレクトリにファイルが複数存在したとき、先に記述したファイルから優先してインデックスページに設定されるようになります。
    # index.phpとindex.htmlが両方存在した場合、index.phpが優先してインデックスページに設定されます。
    # PHPを実行できるようにするため、index.phpを先頭に設定しています
    index index.php index.html index.htm;

    # クリックジャッキング対応として、自身と生成元が同じフレーム内に限りページを表示する設定をします。
    add_header X-Frame-Options "SAMEORIGIN";
    # クロスサイトスクリプティング（XSS）に対するフィルタ機能を強制的に有効にする。
    add_header X-XSS-Protection "1; mode=block";
    # Content-typeで指定されたMIMEタイプに必ず沿うようにできる。
    # X-Content-Type-Options レスポンスヘッダーの値に nosniff を設定して送信すると、Internet Explorer が MIME Sniffing 機能で content-type 宣言を回避するのを防止できるそうです。
    # ちなみに、FirefoxにはAdd X-Content-Type-Options: nosniff support to Firefoxというような報告もあがっています。
    add_header X-Content-Type-Options "nosniff";

    # access_log, error_logでは、それぞれ、アクセスログの出力先パス・エラーログの出力先パスを指定しています。
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;
    
    # 文字コードの設定
    charset utf-8;

    # まずサーバーが404の httpステータスを返した時、つまりアプリケーションサーバーがダウンしたときにカスタムページが表示されるよう宣言します。
    error_page 404 /index.php;

    # apache用のlocation設定
    # locationで、URIごとにどのファイルを配信するのかを設定しています。
    location / {
        # locationでは、URIのパスにファイルがあるか、なかった場合ディレクトリがあるか、ファイルもディレクトリもなかった場合、index.phpを返す、という設定をしています。
        # また、$is_args$argsでは、getパラメータを取得しています。
        try_files $uri $uri/ /index.php$is_args$args;
    }
    # locationでは、NginxがPHP-FPMにリクエストを渡すための設定をしています。
    # 拡張子がphpであるファイルに対して処理する
    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        # fastcgi_passのapp:9000についてですが、本来は127.0.0.1:9000のように設定するのですが、docker-composeではすべてのサービス間に自動でリンクが張られており、appのようなサービス名で設定することができます。
        # 9000はPHP-FPMが起動するデフォルトのポート番号です。
        fastcgi_pass app:9000;
        fastcgi_index index.php;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # nginx用のlocation設定
    # location / {
    #     # try to serve file directly, fallback to rewrite
    #     try_files $uri @rewriteapp;
    # }

    # location @rewriteapp {
    #     # rewrite all to index.php
    #     rewrite ^(.*)$ /index.php/$1 last;
    # }

    # location ~ ^/index\.php(/|$) {
    #     try_files @heroku-fcgi @heroku-fcgi;
    #     # ensure that /index.php isn't accessible directly, but only through a rewrite
    #     internal;
    # }

    # well-knownディレクトリを除く すべてのドットファイルへのアクセスを拒否する
    # well-knownディレクトリはSSL化を行うために利用するLet's Encryptが使用するため、
    # 開発環境においてなくても問題はないが、あっても困るものではない為、書いておいていいだろう。
    location ~ /\.(?!well-known).* {
    deny all;
    }
}



# server { # この中は「serverブロック」と呼ぶ
#     listen 80; # listen ディレクティブ
    
#     root /var/www/html/public; # root ディレクティブ

#     access_log /var/log/nginx/access.log;
#     error_log /var/log/nginx/error.log;

#     add_header X-Frame-Options "SAMEORIGIN";
#     add_header X-XSS-Protection "1; mode=block";
#     add_header X-Content-Type-Options "nosniff";

#     index index.php index.html index.htm;

#     charset utf-8;

#     ; location / { # この中は「locationブロック」と呼ぶ
#     ;     try_files $uri $uri/ /index.php?$query_string;# try_files ディレクティブ
#     ; }

#     location / {
#     # try to serve file directory, fallback to rewrite
#     try_files $uri @rewriteapp;
#     }

#     location @rewriteapp {
#         # rewrite all to index.php
#         rewrite ^(.*)$ /index.php/$1 last;
#     }

#     location = /favicon.ico { access_log off; log_not_found off; }
#     location = /robots.txt  { access_log off; log_not_found off; }

#     error_page 404 /index.php;

#     location ~ \.php$ {
#         fastcgi_pass app:9000;
#         fastcgi_index index.php;
#         fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
#         include fastcgi_params;
#     }

#     location ~ /\.(?!well-known).* {
#         deny all;
#     }
# }